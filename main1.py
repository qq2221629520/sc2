# # 重写了一个通知窗口类，实现了鼠标移动到窗口区域内，窗口自动移动到鼠标附近# # pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxxx# # 打包命令 pyinstaller xxxxxxxx --onefile --icon=xxxxxxxxxx# import random# import sys# import time## import pyautogui# from PyQt5.QtCore import Qt, QPoint, QTimer# from PyQt5.QtGui import QCursor# from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QHBoxLayout, QVBoxLayout#### class MyWidget(QWidget):#     # 初始化函数#     def __init__(self):#         super().__init__()#         #设置窗口标题#         self.setWindowTitle("python背板指南")#         #设置窗口大小、初始位置#         self.setGeometry(34, 535, 50, 50)#         self.setMouseTracking(True)###         #创建垂直布局#         global v_layout#         v_layout = QVBoxLayout()#         # 设置垂直布局上下分散对齐#         v_layout.setAlignment(Qt.AlignTop | Qt.AlignHCenter)#     # 鼠标进入事件处理函数#     def enterEvent(self, event):#         # 获取当前鼠标位置#         cursor_pos = QCursor.pos()#         # 随机二组随机位置#         new_pos1 = QPoint(0, 0)#         new_pos2 = QPoint(1339, 56)#         # 随机选择一个位置#         new_pos = random.choice([new_pos1, new_pos2])#         # 移动窗口#         self.move(new_pos)#     # 鼠标移动事件处理函数#     def mouseMoveEvent(self, event):#         # 如果鼠标移动到窗口区域内，则调用 enterEvent 处理函数#         if self.rect().contains(event.pos()):#             self.enterEvent(event)##     def zhiding(self):#         self.setWindowFlags(Qt.WindowStaysOnTopHint)#         self.show()# #定义一个函数，可以传入1-10个字符串参数，参数个数不定，以标签的形式显示在窗口上# def createWidget(*args):##     # global v_layout#     app = QApplication([])#     widget = MyWidget()#     #判断参数个数，如果参数个数为1，则显示一个标签#     #定义一个创建标签的函数，传入标签的文本内容，返回一个标签对象#     def createLabel(text):#         label = QLabel(widget)#         label.setText(text)#         #设置文字为红色，字体大小为40，加粗，华文楷体#         label.setStyleSheet("color:red;font-size:40px;font-weight:bold;font-family:华文楷体")#         return label#     for i in range(len(args)):#         locals()['label'+str(i+1)] = createLabel(args[i])#         v_layout.addWidget(locals()['label'+str(i+1)])#     widget.setLayout(v_layout)#     widget.show()#     #窗口展示6s后自动关闭#     QTimer.singleShot(3000, widget.close)#     app.exec_()#     #释放资源#     del widget#     del app#     # time.sleep(1)#     # return widget## if __name__ == '__main__':#     # createWidget('测试窗口1')  #少了这一行，程序就跑不起来了，我也不知道为什么，有知道的大佬可以告诉我一下，邮箱：2221629520###     app2=QApplication([])#     widget2=MyWidget()#     widget2.show()#     app2.exec_()# 请输入这个程序的功能# pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxxx# 打包命令 pyinstaller xxxxxxxx --onefile --icon=xxxxxxxxxx#import randomimport randomfrom PyQt5.QtCore import Qt, QPoint, QTimerfrom PyQt5.QtGui import QCursorfrom PyQt5.QtWidgets import QWidget, QApplication, QLabel, QHBoxLayout, QVBoxLayoutclass MyWidget(QWidget):    # 初始化函数，接收0-10个字符串参数    def __init__(self, *args):        # 调用父类的初始化函数        super().__init__()        # 设置窗口标题        self.setWindowTitle("python背板指南")        # 设置窗口大小、初始位置        self.setGeometry(34, 535, 50, 50)        # self.zhiding()        layout = QVBoxLayout()        for arg in args:            label = QLabel(arg)            label.setStyleSheet("color:red;font-size:40px;font-weight:bold;font-family:华文楷体")            layout.addWidget(label)        self.setLayout(layout)        self.setMouseTracking(True)    def enterEvent(self, event):        # 获取当前鼠标位置        cursor_pos = QCursor.pos()        # 随机二组随机位置        new_pos1 = QPoint(0, 0)        new_pos2 = QPoint(1339, 56)        # 随机选择一个位置        new_pos = random.choice([new_pos1, new_pos2])        # 移动窗口        self.move(new_pos)    # 鼠标移动事件处理函数    def mouseMoveEvent(self, event):        # 如果鼠标移动到窗口区域内，则调用 enterEvent 处理函数        if self.rect().contains(event.pos()):            self.enterEvent(event)    def zhiding(self):        self.setWindowFlags(Qt.WindowStaysOnTopHint)        self.show()